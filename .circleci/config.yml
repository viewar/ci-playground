version: 2.1
commands:
  # Create cache for package.json ignoring the version number.
  cached_npm_install:
    steps:
      - run:
          name: Create package-caching.json (without version)
          command: cat package.json | npx json -e 'delete this.version' > package.caching.json
      - restore_cache:
          name: Restore NPM Package Cache
          keys:
            - m2-npm-packages-{{ checksum "package.caching.json" }}
            - m2-npm-packages-
      - run:
          name: Install
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          name: Save NPM Package Cache
          key: m2-npm-packages-{{ checksum "package.caching.json" }}
          paths:
            - ./node_modules/
      - run:
          name: Remove package-caching.json
          command: rm package.caching.json
jobs:
  # Checkout code and do npm install.
  checkout-and-install:
      docker:
        - image: circleci/node:13
      steps:
        - checkout
        - cached_npm_install
  # Test for every commit.
  test:
    docker:
      - image: circleci/node:13
    parallelism: 2
    steps:
      - checkout
      - cached_npm_install
      - run:
          name: Test
          command: npm run test
  # Build every commit.
  build:
    docker:
      - image: circleci/node:13
    parallelism: 2
    steps:
      - checkout
      - cached_npm_install
      - run:
          name: Test
          command: npm run test
  # Bump patch version number (develop only).
  bump-version:
    docker:
      - image: circleci/node:13
    steps:
      - checkout
      - run:
          name: Patch version & create version commit
          command: |
              # Make sure directory is clean after test & build.
              git checkout .
              # Bump patch version.
              git config --global user.email circleci@circleci
              git config --global user.name CircleCI
              LAST_COMMIT_MESSAGE="$(git log -1  --pretty='%s')"
              npm version patch -m "v%s ($LAST_COMMIT_MESSAGE) [skip ci]"
      - run:
          name: Push changes
          command: |
              git push --set-upstream origin ${CIRCLE_BRANCH}
              git push --tags
  # Deploy to respective apps with postfix (.dev, .test or nothing).
  deploy:
    docker:
      - image: circleci/node:13
    parameters:
      stage:
        default: ""
        description: The stage where this deployment goes to. Must be one of ".dev", ".test", "".
        type: enum
        enum: [".dev", ".test", ""]
    steps:
      - checkout
      - cached_npm_install
      - run:
          name: Deploy
          command: |
              # Read app version/id from package.json/viewar-config
              APP_VERSION="$(cat package.json | npx json version)"
              APP_ID="$((cat viewar-config.json || cat .viewar-config) | npx json appId)"
              # Login
              echo $USER_PASSWORD | npx @viewar/cli login $USER_NAME
              # Deploy
              npx @viewar/cli deploy $APP_ID<< parameters.stage >> $APP_VERSION
workflows:
  version: 2
  test:
    jobs:
      - checkout-and-install
      - test:
          requires:
            - checkout-and-install
      - build:
          requires:
            - checkout-and-install
      - bump-version:
          requires:
            - test
            - build
          filters:
            branches:
              only: 
                - develop
                - test
      - deploy:
          stage: ".dev"
          requires:
            - bump-version
          filters:
            branches:
              only: develop
      - deploy:
          stage: ".test"
          requires:
            - bump-version
          filters:
            branches:
              only: test
      - deploy:
          stage: ""
          requires:
            - test
            - build
          filters:
            branches:
              only: master